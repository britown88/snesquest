/***********************************************************************
   WARNING: This file generated by robots.  Do not attempt to modify.

   This API is for use with DBAssets.db
   Which contains 7 table(s).
***********************************************************************/

#pragma once

#include "libutils/Defs.h"
#include "libutils/String.h"

typedef struct sqlite3_stmt sqlite3_stmt;
typedef struct lua_State lua_State;
typedef struct DB_DBAssets DB_DBAssets;

DB_DBAssets *db_DBAssetsCreate();
void db_DBAssetsDestroy(DB_DBAssets *self);
int db_DBAssetsCreateTables(DB_DBAssets *self);

typedef struct {
   String *id;
   void *image;
   int imageSize;
} DBImage;

#define VectorTPart DBImage
#include "libutils/Vector_Decl.h"

void dbImageDestroy(DBImage *self); //this does not call free on self!!
int dbImageInsert(DB_DBAssets *db, const DBImage *obj);
int dbImageUpdate(DB_DBAssets *db, const DBImage *obj); //will base on primary key
vec(DBImage) *dbImageSelectAll(DB_DBAssets *db);
DBImage dbImageSelectFirstByid(DB_DBAssets *db, const char *id);
int dbImageDeleteAll(DB_DBAssets *db);
int dbImageDeleteByid(DB_DBAssets *db, const char *id);

typedef struct {
   String *id;
   void *palette;
   int paletteSize;
} DBPalette;

#define VectorTPart DBPalette
#include "libutils/Vector_Decl.h"

void dbPaletteDestroy(DBPalette *self); //this does not call free on self!!
int dbPaletteInsert(DB_DBAssets *db, const DBPalette *obj);
int dbPaletteUpdate(DB_DBAssets *db, const DBPalette *obj); //will base on primary key
vec(DBPalette) *dbPaletteSelectAll(DB_DBAssets *db);
DBPalette dbPaletteSelectFirstByid(DB_DBAssets *db, const char *id);
int dbPaletteDeleteAll(DB_DBAssets *db);
int dbPaletteDeleteByid(DB_DBAssets *db, const char *id);

typedef struct {
   String *id;
   int width;
   int height;
} DBSprite;

#define VectorTPart DBSprite
#include "libutils/Vector_Decl.h"

void dbSpriteDestroy(DBSprite *self); //this does not call free on self!!
int dbSpriteInsert(DB_DBAssets *db, const DBSprite *obj);
int dbSpriteUpdate(DB_DBAssets *db, const DBSprite *obj); //will base on primary key
vec(DBSprite) *dbSpriteSelectAll(DB_DBAssets *db);
DBSprite dbSpriteSelectFirstByid(DB_DBAssets *db, const char *id);
int dbSpriteDeleteAll(DB_DBAssets *db);
int dbSpriteDeleteByid(DB_DBAssets *db, const char *id);

typedef struct {
   int id;
   String *sprite;
   String *image;
   int index;
   int imgX;
   int imgY;
} DBSpriteFrame;

#define VectorTPart DBSpriteFrame
#include "libutils/Vector_Decl.h"

void dbSpriteFrameDestroy(DBSpriteFrame *self); //this does not call free on self!!
int dbSpriteFrameInsert(DB_DBAssets *db, const DBSpriteFrame *obj);
int dbSpriteFrameUpdate(DB_DBAssets *db, const DBSpriteFrame *obj); //will base on primary key
vec(DBSpriteFrame) *dbSpriteFrameSelectAll(DB_DBAssets *db);
DBSpriteFrame dbSpriteFrameSelectFirstBysprite(DB_DBAssets *db, const char *sprite);
vec(DBSpriteFrame) *dbSpriteFrameSelectBysprite(DB_DBAssets *db, const char *sprite);
int dbSpriteFrameDeleteAll(DB_DBAssets *db);
int dbSpriteFrameDeleteBysprite(DB_DBAssets *db, const char *sprite);

typedef struct {
   int id;
   String *set;
   String *sprite;
   boolean lit;
   int radius;
   int centerLevel;
   int fadeWidth;
   boolean occlusion;
} DBTileSchema;

#define VectorTPart DBTileSchema
#include "libutils/Vector_Decl.h"

void dbTileSchemaDestroy(DBTileSchema *self); //this does not call free on self!!
int dbTileSchemaInsert(DB_DBAssets *db, const DBTileSchema *obj);
int dbTileSchemaUpdate(DB_DBAssets *db, const DBTileSchema *obj); //will base on primary key
vec(DBTileSchema) *dbTileSchemaSelectAll(DB_DBAssets *db);
DBTileSchema dbTileSchemaSelectFirstByset(DB_DBAssets *db, const char *set);
vec(DBTileSchema) *dbTileSchemaSelectByset(DB_DBAssets *db, const char *set);
int dbTileSchemaDeleteAll(DB_DBAssets *db);
int dbTileSchemaDeleteByset(DB_DBAssets *db, const char *set);

typedef struct {
   String *module;
   String *script;
} DBLuaScript;

#define VectorTPart DBLuaScript
#include "libutils/Vector_Decl.h"

void dbLuaScriptDestroy(DBLuaScript *self); //this does not call free on self!!
int dbLuaScriptInsert(DB_DBAssets *db, const DBLuaScript *obj);
int dbLuaScriptUpdate(DB_DBAssets *db, const DBLuaScript *obj); //will base on primary key
vec(DBLuaScript) *dbLuaScriptSelectAll(DB_DBAssets *db);
DBLuaScript dbLuaScriptSelectFirstBymodule(DB_DBAssets *db, const char *module);
int dbLuaScriptDeleteAll(DB_DBAssets *db);
int dbLuaScriptDeleteBymodule(DB_DBAssets *db, const char *module);

typedef struct {
   String *id;
   void *map;
   int mapSize;
} DBMap;

#define VectorTPart DBMap
#include "libutils/Vector_Decl.h"

void dbMapDestroy(DBMap *self); //this does not call free on self!!
int dbMapInsert(DB_DBAssets *db, const DBMap *obj);
int dbMapUpdate(DB_DBAssets *db, const DBMap *obj); //will base on primary key
vec(DBMap) *dbMapSelectAll(DB_DBAssets *db);
DBMap dbMapSelectFirstByid(DB_DBAssets *db, const char *id);
int dbMapDeleteAll(DB_DBAssets *db);
int dbMapDeleteByid(DB_DBAssets *db, const char *id);

