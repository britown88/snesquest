table Palette{
   SELECT PRIMARY_KEY UNIQUE AUTOINCREMENT int id;
   String name;
   int colorCount;
   Blob colors;
};

table CharacterImportData{
   SELECT PRIMARY_KEY UNIQUE AUTOINCREMENT int id;
   
   // in pixels...
   int width;
   int height;

   // 32-bit RGBA
   Blob pixelData;

   int offsetX;
   int offsetY;
   int tileCountX;
   int tileCountY;

   // ColorMapEntry*
   Blob colorMapping; 
};

table CharacterMap{
   SELECT PRIMARY_KEY UNIQUE AUTOINCREMENT int id;
   String name;

   // width/height are in terms of 8x8 tiles
   int width;
   int height;

   // 4, 16 or 256
   int colorCount;
    
   // bitplaned ppu format
   Blob data;

   // width*height ints 0-3 for alternative palettes to use
   Blob tilePaletteMap;

   // FK constraint for importdata db, contains the raw png input and editor data
   int importDataId;

   // how many palettes did we encode with
   int encodePaletteCount;

   FOREIGN_KEY(importId, CharacterImportData.id, RESTRICT);
};

table CharacterEncodePalette{
   SELECT PRIMARY_KEY UNIQUE AUTOINCREMENT int id;
   SELECT int characterMapId;
   int paletteId;

   // 0-7
   int index;

   FOREIGN_KEY(characterMapId, CharacterMap.id, CASCADE);
   FOREIGN_KEY(paletteId, Palette.id, CASCADE);
};