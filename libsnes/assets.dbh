table PaletteOwners{
   PRIMARY_KEY UNIQUE AUTOINCREMENT int id;
   int characterMapId;
   
   constraints{
      FOREIGN_KEY(characterMapId, CharacterMaps.id, CASCADE);
   };
};

table Palettes{
   SELECT PRIMARY_KEY UNIQUE AUTOINCREMENT int id;
   int paletteOwnerId;
   String name;
   int colorCount;
   Blob colors;

   constraints{
      FOREIGN_KEY(paletteOwnerId, PaletteOwners.id, CASCADE);
   };
};

table CharacterImportData{
   PRIMARY_KEY UNIQUE AUTOINCREMENT int id;
   SELECT NOT_NULL int characterMapId;

   // in pixels...
   int width;
   int height;

   // 32-bit RGBA
   Blob pixelData;

   int offsetX;
   int offsetY;
   int tileCountX;
   int tileCountY;

   // ColorMapEntry*
   Blob colorMapping; 

   constraints{
      FOREIGN_KEY(characterMapId, CharacterMaps.id, CASCADE);
   };
};

table CharacterMaps{
   SELECT PRIMARY_KEY UNIQUE AUTOINCREMENT int id;
   UNIQUE String name;

   // width/height are in terms of 8x8 tiles
   int width;
   int height;

   // 4, 16 or 256
   int colorCount;
    
   // bitplaned ppu format
   Blob data;

   // width*height bytes 0-3 for alternative palettes to use
   Blob tilePaletteMap;

   // how many palettes did we encode with
   int encodePaletteCount;
};

table CharacterEncodePalette{
   SELECT PRIMARY_KEY UNIQUE AUTOINCREMENT int id;
   SELECT int characterMapId;
   int paletteId;

   // 0-7
   int index;

   constraints{
      FOREIGN_KEY(characterMapId, CharacterMaps.id, CASCADE);
      FOREIGN_KEY(paletteId, Palettes.id, CASCADE);
   };
};